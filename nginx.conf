worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

# declare the outside port env var, passed by docker-compose
env MAPPED_PORT;

http {
    include       /usr/local/openresty/nginx/conf/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    server {
        listen 443 ssl http2;
        server_name localhost;

        ssl_certificate /var/www/mendersoftware/cert/cert.pem;
        ssl_certificate_key /var/www/mendersoftware/cert/key.pem;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;

        error_page 497 =200 /;

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

        # extract the outside port env var
        set_by_lua $MAPPED_PORT 'return os.getenv("MAPPED_PORT")';

        # the following locations are for device-originating requests to our APIs
        # we route selected requests to devauth via the 'auth_request' module
        # we also transform the url scheme:
        #
        # /api/devices/0.1/authentication -> mender-device-auth:8080/api/0.0.1/...
        # /api/devices/0.1/deployments/... -> mender-deployments:8080/api/0.0.1/...

        # device authentication
        location /api/devices/0.1/authentication/auth_requests{
            proxy_pass http://mender-device-auth:8080/api/0.1.0/auth_requests;
        }

        # deployments
        location ~ /api/devices/0.1/deployments/device/update{
            auth_request /devauth;
            # regex location needs a rewrite before proxy_pass
            rewrite ^.*$ /api/0.0.1/device/update break;
            proxy_pass http://mender-deployments:8080;
        }
        location ~ /api/devices/0.1/deployments/device/deployments/(?<depid>.*)/log{
            auth_request /devauth;
            client_max_body_size 10M; 
            rewrite ^.*$ /api/0.0.1/device/deployments/$depid/log break;
            proxy_pass http://mender-deployments:8080;
        }
        location ~ /api/devices/0.1/deployments/device/deployments/(?<depid>.*)/status{
            auth_request /devauth;
            rewrite ^.*$ /api/0.0.1/device/deployments/$depid/status break;
            proxy_pass http://mender-deployments:8080;
        }

        location ~ /api/devices/0.1/inventory/device/attributes{
            auth_request /devauth;
            rewrite ^.*$ /api/0.1.0/attributes break;
            proxy_pass http://mender-inventory:8080;
        }

        # the following locations are for requests to our APIs from UIs, etc
        # no auth
        # examples:
        # /api/integrations/0.1/admission -> mender-device-adm/api/0.1.0/...
        # /api/integrations/0.0/deployments/... -> mender-deployments:8080/api/0.0.1/...

        # device admission
        location ~ /api/integrations/0.1/admission(?<endpoint>/.*){
            rewrite ^.*$ /api/0.1.0$endpoint break;

            proxy_redirect ~^.*/api/0.1.0/(.*)$ $scheme://$host:$MAPPED_PORT/api/integrations/0.1/admission/$1;

            # no sane way of transforming multi-valued headers in vanilla nginx
            # need to drop down to inline lua for this
            header_filter_by_lua '
             local h = ngx.resp.get_headers()
             local links = {}
             for k, v in pairs(h) do
                if k == "link" then
                    local new_base = ngx.var.scheme .. "://" ..
                                     ngx.var.host .. ":" .. os.getenv("MAPPED_PORT") ..
                                     "/api/integrations/0.1/admission/"
                    local link_regex = "<.*/api/(.*?)/(.*)>"
                    local new_link = "<" .. new_base .. "$2" .. ">"

                    if type(v) == "table" then
                        for i=1, #v do
                          local newstr, n, err = ngx.re.sub(v[i], link_regex, new_link)
                          if newstr then
                            table.insert(links, newstr)
                          end
                        end
                    else
                        local newstr, n, err = ngx.re.sub(v, link_regex, new_link)
                        if newstr then
                            table.insert(links, newstr)
                        end
                    end
                end
             end
             ngx.header["Link"] = links';

            proxy_pass http://mender-device-adm:8080;
        }

        # deployments
        location ~ /api/integrations/0.1/deployments/images/(?<id>.*) {
            client_max_body_size 10G;
            rewrite ^.*$ /api/0.0.1/images/$id break;
            proxy_redirect ~^.*/api/0.0.1/(.*)$ $scheme://$host:$MAPPED_PORT/api/integrations/0.1/deployments/$1;
            proxy_pass http://mender-deployments:8080;
        }
        location ~ /api/integrations/0.1/deployments(?<endpoint>/.*){
            rewrite ^.*$ /api/0.0.1$endpoint break;
            proxy_redirect ~^.*/api/0.0.1/(.*)$ $scheme://$host:$MAPPED_PORT/api/integrations/0.1/deployments/$1;
            proxy_pass http://mender-deployments:8080;
        }

        # inventory
        location ~ /api/integrations/0.1/inventory(?<endpoint>/.*){
            rewrite ^.*$ /api/0.1.0$endpoint break;
            proxy_redirect ~^.*/api/0.1.0/(.*)$ $scheme://$host:$MAPPED_PORT/api/integrations/0.1/inventory/$1;
            proxy_pass http://mender-inventory:8080;
        }

        # this is our verification endpoint definition (alias over /devauth/tokens/verify)
        # used only internally to authenticate device requests (not a real endpoint)
        location /devauth {
            internal;
            proxy_method POST; #default would be GET, but our endpoint doesn't accept that
            proxy_pass http://mender-device-auth:8080/api/0.1.0/tokens/verify;
        }

        # UI
        location = /ui {
            return 301 https://$host:$MAPPED_PORT/ui/;
	    }
        location /ui {
            rewrite ^/ui/(.*)$ /$1 break;
            proxy_pass http://mender-gui:80;
        }

        # redirect / to UI
        location = / {
            return 301 https://$host:$MAPPED_PORT/ui/;
        }

    }
}
