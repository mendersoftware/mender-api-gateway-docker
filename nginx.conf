worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      'request ID "$upstream_http_x_men_requestid"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    resolver 127.0.0.11 valid=10s;

    #gzip  on;
    server {
        listen 80;

        listen 443 ssl http2;
        ssl_certificate /var/www/mendersoftware/cert/cert.crt;
        ssl_certificate_key /var/www/mendersoftware/cert/private.key;
        ssl_session_tickets off;

        server_name _;
        return 444;
    }

    server {
        listen 80;
        listen 443 ssl http2;
        server_name @ALLOWED_HOSTS@;

        ssl_certificate /var/www/mendersoftware/cert/cert.crt;
        ssl_certificate_key /var/www/mendersoftware/cert/private.key;

        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers HIGH:!aNULL:!MD5:!SHA;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;
        ssl_stapling on;
        ssl_stapling_verify on;

        # non https requests are redirected to https
        error_page 497 =301 https://$http_host$request_uri;

        # validate Origin header if present
        set $origin_valid 0;
        if ($http_origin = '') {
            set $origin_valid 1;
        }
        if ($http_origin = $scheme://$host) {
            set $origin_valid 1;
        }
        if ($http_origin = $scheme://$host:$server_port) {
            set $origin_valid 1;
        }
        if ($origin_valid = 0) {
            return 400;
        }

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

        # additional headers for application security
        add_header X-XSS-Protection "1; mode=block";
        add_header Cache-Control "no-cache, no-store";
        add_header Pragma "no-cache";

        # more_set_headers cannot be used in server if block, and we want to
        # avoid adding it to every location block, so we're going to set
        # Access-Control-Allow-Origin on every 401 response
        #more_set_headers -s 401 "Access-Control-Allow-Origin: *";

        # the following locations are for device-originating requests to our APIs
        # we route selected requests to devauth via the 'auth_request' module
        # we also transform the url scheme:
        #
        # /api/devices/v1/authentication -> mender-device-auth:8080/api/0.0.1/...
        # /api/devices/v1/deployments/... -> mender-deployments:8080/api/0.0.1/...

        # device authentication
        location /api/devices/v1/authentication/{
            set $service mender-device-auth;
            proxy_pass http://$service:8080$request_uri;
        }

        # deployments
        location ~ /api/devices/v1/deployments/device/deployments/next{
            auth_request /devauth;
            auth_request_set $requestid $upstream_http_x_men_requestid;

            # regex location needs a rewrite before proxy_pass
            rewrite ^.*$ /api/0.0.1/device/deployments/next break;
            proxy_pass http://mender-deployments:8080;
            proxy_set_header X-MEN-RequestID $requestid;
        }
        location ~ /api/devices/v1/deployments/device/deployments/(?<depid>.*)/log{
            auth_request /devauth;
            auth_request_set $requestid $upstream_http_x_men_requestid;

            client_max_body_size 10M;
            rewrite ^.*$ /api/0.0.1/device/deployments/$depid/log break;
            proxy_pass http://mender-deployments:8080;
            proxy_set_header X-MEN-RequestID $requestid;
        }
        location ~ /api/devices/v1/deployments/device/deployments/(?<depid>.*)/status{
            auth_request /devauth;
            auth_request_set $requestid $upstream_http_x_men_requestid;

            rewrite ^.*$ /api/0.0.1/device/deployments/$depid/status break;
            proxy_pass http://mender-deployments:8080;
            proxy_set_header X-MEN-RequestID $requestid;
        }

        location ~ /api/devices/v1/inventory/device/attributes{
            auth_request /devauth;
            auth_request_set $requestid $upstream_http_x_men_requestid;

            rewrite ^.*$ /api/0.1.0/attributes break;
            proxy_pass http://mender-inventory:8080;
            proxy_set_header X-MEN-RequestID $requestid;
        }

        # the following locations are for requests to our APIs from UIs, etc
        # no auth
        # examples:
        # /api/management/v1/admission -> mender-device-adm/api/0.1.0/...
        # /api/management/v1/deployments/... -> mender-deployments:8080/api/0.0.1/...

        # user authz endpoint
        location = /api/management/v1/useradm/auth/login{
            proxy_pass http://mender-useradm:8080/api/0.1.0/auth/login;
        }

        # user auth verification endpoint
        location = /api/management/v1/useradm/auth/verify{
            proxy_pass http://mender-useradm:8080/api/0.1.0/auth/verify;
        }

        # exclude Device API endpoints from Management API routing
        # todo: remove with unifying routing
        location ~ /api/management/v1/deployments/device/.*{
            return 404;
        }

        location = /api/management/v1/inventory/device/attributes{
            return 404;
        }

        # user administration
        location ~ /api/management/v1/useradm(?<endpoint>/.*){
            auth_request /userauth;
            auth_request_set $requestid $upstream_http_x_men_requestid;

            rewrite ^.*$ /api/0.1.0$endpoint break;
            proxy_pass http://mender-useradm:8080;
            proxy_set_header X-MEN-RequestID $requestid;
        }

        # device authentication
       location ~ /api/management/(v[0-9]+)/devauth/{
            auth_request /userauth;
            auth_request_set $requestid $upstream_http_x_men_requestid;

            proxy_pass http://mender-device-auth:8080;
           proxy_set_header X-MEN-RequestID $requestid;
       }

        # device admission
        location ~ /api/management/v1/admission(?<endpoint>/.*){
            auth_request /userauth;
            auth_request_set $requestid $upstream_http_x_men_requestid;

            rewrite ^.*$ /api/0.1.0$endpoint break;
            proxy_pass http://mender-device-adm:8080;
            proxy_set_header X-MEN-RequestID $requestid;
        }

        # deployments
        location ~ /api/management/v1/deployments/artifacts$ {
            auth_request /userauth;
            auth_request_set $requestid $upstream_http_x_men_requestid;

            client_max_body_size 10G;

            # do not buffer incoming upload requests into an intermediate file,
            # deployments service performs an upload to storage engine while
            # receiving the file from the client
            proxy_request_buffering off;

            rewrite ^.*$ /api/0.0.1/artifacts break;
            proxy_pass http://mender-deployments:8080;
            proxy_set_header X-MEN-RequestID $requestid;
        }
        location ~ /api/management/v1/deployments(?<endpoint>/.*){
            auth_request /userauth;
            auth_request_set $requestid $upstream_http_x_men_requestid;

            rewrite ^.*$ /api/0.0.1$endpoint break;
            proxy_pass http://mender-deployments:8080;
            proxy_set_header X-MEN-RequestID $requestid;
        }

        # inventory
        location ~ /api/management/v1/inventory(?<endpoint>/.*){
            auth_request /userauth;
            auth_request_set $requestid $upstream_http_x_men_requestid;

            rewrite ^.*$ /api/0.1.0$endpoint break;
            proxy_pass http://mender-inventory:8080;
            proxy_set_header X-MEN-RequestID $requestid;
        }

        # this is our verification endpoint definition (alias over /devauth/tokens/verify)
        # used only internally to authenticate device requests (not a real endpoint)
        location = /devauth {
            internal;
            proxy_method POST; #default would be GET, but our endpoint doesn't accept that
            proxy_pass http://mender-device-auth:8080/api/internal/v1/devauth/tokens/verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
        }

        # case similar to /devauth but this time for user verification
        location = /userauth {
            internal;

            if ($request_method = OPTIONS) {
                return 200;
            }

            client_max_body_size 0;
            proxy_method POST;
            proxy_pass http://mender-useradm:8080/api/0.1.0/auth/verify;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Method $request_method;
        }

        # UI
        location = /ui {
            return 301 /ui/;
        }

        location /ui {
            rewrite ^/ui/(.*)$ /$1 break;
            proxy_pass http://mender-gui:80;
        }

        # redirect / to UI
        location = / {
            return 301 /ui/;
        }

    }
}

