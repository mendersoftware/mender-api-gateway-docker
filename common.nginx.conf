include /usr/local/openresty/nginx/conf/optional/endpoints/*.conf;

# validate Origin header if present
set $origin_valid 0;
if ($http_origin = '') {
	set $origin_valid 1;
}
if ($http_origin = $scheme://$host) {
	set $origin_valid 1;
}
if ($http_origin = $scheme://$host:$server_port) {
	set $origin_valid 1;
}
if ($http_origin ~* ^((https?:\/\/)?(@ALLOWED_ORIGIN_HOSTS@))$) {
	set $origin_valid 1;
}
if ($origin_valid = 0) {
	return 400;
}

proxy_http_version 1.1;

add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;

# additional headers for application security
add_header X-XSS-Protection "1; mode=block";
add_header Cache-Control "no-cache, no-store";
add_header Pragma "no-cache";

# more_set_headers cannot be used in server if block, and we want to
# avoid adding it to every location block, so we're going to set
# Access-Control-Allow-Origin on every 401 response
more_set_headers -s 401 "Access-Control-Allow-Origin: *";

# the following locations are for device-originating requests to our APIs
# we route selected requests to devauth via the 'auth_request' module
# we also transform the url scheme:
#
# /api/devices/v1/authentication -> mender-device-auth:8080/api/0.0.1/...
# /api/devices/v1/deployments/... -> mender-deployments:8080/api/0.0.1/...

# device authentication
location /api/devices/v1/authentication/ {
	proxy_pass http://mender-device-auth:8080;
}

# deployments
location = /api/devices/v1/deployments/device/deployments/next {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /devauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;

	proxy_pass http://mender-deployments:8080;
	proxy_set_header X-MEN-RequestID $requestid;
}

location ~ /api/devices/v1/deployments/device/deployments/(?<depid>.*)/log {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /devauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;

	client_max_body_size 10M;
	proxy_pass http://mender-deployments:8080;
	proxy_set_header X-MEN-RequestID $requestid;
}

location ~ /api/devices/v1/deployments/device/deployments/(?<depid>.*)/status {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /devauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;

	proxy_pass http://mender-deployments:8080;
	proxy_set_header X-MEN-RequestID $requestid;
}

location ~ /api/devices/v1/inventory/device/attributes {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /devauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;
	auth_request_set $rbac_groups $upstream_http_x_men_rbac_inventory_groups;

	rewrite ^.*$ /api/0.1.0/attributes break;
	proxy_pass http://mender-inventory:8080;
	proxy_set_header X-MEN-RequestID $requestid;
	proxy_set_header X-MEN-RBAC-Inventory-Groups $rbac_groups;
}

# the following locations are for requests to our APIs from UIs, etc
# no auth
# examples:
# /api/management/v1/devauth -> mender-device-auth/api/0.1.0/...
# /api/management/v1/deployments/... -> mender-deployments:8080/api/0.0.1/...

# user authz endpoint
location = /api/management/v1/useradm/auth/login {
	proxy_pass http://mender-useradm:8080/api/management/v1/useradm/auth/login;
}

location = /api/management/v1/useradm/auth/plan-verify {
	proxy_pass http://mender-useradm:8080/api/management/v1/useradm/auth/plan-verify;
}

location ~ /api/management/v1/useradm/(oauth2|auth/password-reset)/.* {
	proxy_set_header X-Forwarded-Host $host;
	proxy_pass http://mender-useradm:8080;
}

# exclude Device API endpoints from Management API routing
# todo: remove with unifying routing
location ~ /api/management/v1/deployments/device/.* {
	return 404;
}

location = /api/management/v1/inventory/device/attributes {
	return 404;
}

# user administration
location ~ /api/management/(v[0-9]+)/useradm/ {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /userauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;

	proxy_pass http://mender-useradm:8080;
	proxy_set_header X-MEN-RequestID $requestid;
}

# device authentication
location ~ /api/management/(v[0-9]+)/devauth/ {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /userauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;

	proxy_pass http://mender-device-auth:8080;
	proxy_set_header X-MEN-RequestID $requestid;
}

# deployments
location = /api/management/v1/deployments/artifacts {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /userauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;

	client_max_body_size 10G;

	# increased timeouts for longer artifact processing on upload.
	proxy_read_timeout 7200s;
	proxy_send_timeout 7200s;
	proxy_connect_timeout 7200s;

	# do not buffer incoming upload requests into an intermediate file,
	# deployments service performs an upload to storage engine while
	# receiving the file from the client
	proxy_request_buffering off;

	proxy_pass http://mender-deployments:8080;
	proxy_set_header X-MEN-RequestID $requestid;
}

location = /api/management/v1/deployments/artifacts/generate {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /userauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;

	client_max_body_size 10G;

	# do not buffer incoming upload requests into an intermediate file,
	# deployments service performs an upload to storage engine while
	# receiving the file from the client
	proxy_request_buffering off;

	proxy_pass http://mender-deployments:8080;
	proxy_set_header X-MEN-RequestID $requestid;
}

location ~ /api/management/v[0-9]+/deployments(?<endpoint>/.*) {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /userauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;
	auth_request_set $rbac_groups $upstream_http_x_men_rbac_deployments_groups;

	proxy_pass http://mender-deployments:8080;
	proxy_set_header X-MEN-RequestID $requestid;
	proxy_set_header X-MEN-RBAC-Deployments-Groups $rbac_groups;
}

# inventory
location ~ /api/management/v1/inventory(?<endpoint>/.*) {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /userauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;
	auth_request_set $rbac_groups $upstream_http_x_men_rbac_inventory_groups;

	rewrite ^.*$ /api/0.1.0$endpoint break;
	proxy_pass http://mender-inventory:8080;
	proxy_set_header X-MEN-RequestID $requestid;
	proxy_set_header X-MEN-RBAC-Inventory-Groups $rbac_groups;
}

location ~ /api/management/v2/inventory(?<endpoint>/.*) {
	error_page 401 /401.json;
	error_page 403 /403.json;
	error_page 500 =429 /429.json;

	auth_request /userauth;
	auth_request_set $requestid $upstream_http_x_men_requestid;
	auth_request_set $rbac_groups $upstream_http_x_men_rbac_inventory_groups;

	proxy_pass http://mender-inventory:8080;
	proxy_set_header X-MEN-RequestID $requestid;
	proxy_set_header X-MEN-RBAC-Inventory-Groups $rbac_groups;
}

# this is our verification endpoint definition (alias over /devauth/tokens/verify)
# used only internally to authenticate device requests (not a real endpoint)
location = /devauth {
	internal;
	proxy_method POST; #default would be GET, but our endpoint doesn't accept that
	proxy_pass http://mender-device-auth:8080/api/internal/v1/devauth/tokens/verify;
	proxy_pass_request_body off;
	proxy_set_header Content-Length "";
	proxy_set_header X-Original-URI $request_uri;
	proxy_set_header X-Original-Method $request_method;
}

# case similar to /devauth but this time for user verification
# This endpoint returns the following Headers:
#  * X-MEN-RBAC-Inventory-Groups
#  * X-MEN-RBAC-Deployments-Groups 
#  They denote a comma separated list of device groups names that present user
#  is allowed to access, from inventory and deployments respectively
#  The subsequent calls from certain locations to 
# 	 `auth_request_set $rbac_groups $upstream_http_x_men_rbac_inventory_groups;`
# 	 `proxy_set_header X-MEN-RBAC-Inventory-Groups $rbac_groups;`
# 	 `auth_request_set $rbac_groups $upstream_http_x_men_rbac_deployments_groups;`
# 	 `proxy_set_header X-MEN-RBAC-Deployments-Groups $rbac_groups;`
#  provide the endpoints with the information on device groups for RBAC
location = /userauth {
	internal;

	if ($request_method = OPTIONS) {
			return 200;
	}

	client_max_body_size 0;
	proxy_method POST;
	proxy_pass http://mender-useradm:8080/api/internal/v1/useradm/auth/verify;
	proxy_pass_request_body off;
	proxy_set_header Content-Length "";
	proxy_set_header X-Original-URI $request_uri;
	proxy_set_header X-Original-Method $request_method;
}

# UI
location = /ui {
	return 301 /ui/;
}

location /ui {
	proxy_cache ui_cache;
	proxy_cache_revalidate on;
	proxy_ignore_headers Cache-Control Set-Cookie;
	proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

	proxy_cache_valid 200 301 302 @CACHE_UI_SUCCESS_PERIOD@;
	proxy_cache_valid any @CACHE_UI_FAILURE_PERIOD@;

	add_header X-Cache-Status $upstream_cache_status;

	# UI application is in React.js all content is static.
	expires @CACHE_UI_BROWSER_PERIOD@;

	rewrite ^/ui/(.*)$ /$1 break;
	proxy_pass http://mender-gui:80;
}

# redirect / to UI
location = / {
	return 301 /ui/;
}

location = /signup {
	return 301 /ui/#/signup;
}

# common errors
error_page 500 /500.json;
location /500.json {
	add_header 'Content-Type' 'application/json; charset=UTF-8';
	return 500 '{"error": {"status_code": 500,"message": "Internal Server Error"}}';
}

error_page 502 /502.json;
location /502.json {
	add_header 'Content-Type' 'application/json; charset=UTF-8';
	return 502 '{"error": {"status_code": 502,"message": "Bad Gateway"}}';
}

error_page 503 /503.json;
location /503.json {
	add_header 'Content-Type' 'application/json; charset=UTF-8';
	return 503 '{"error": {"status_code": 503,"message": "Service Temporarily Unavailable"}}';
}

error_page 504 /504.json;
location /504.json {
	add_header 'Content-Type' 'application/json; charset=UTF-8';
	return 504 '{"error": {"status_code": 504,"message": "Gateway Timeout"}}';
}

error_page 400 /400.json;
location /400.json {
	add_header 'Content-Type' 'application/json; charset=UTF-8';
	return 400 '{"error": {"status_code": 400,"message": "Bad Request"}}';
}

error_page 401 /401.json;
location /401.json {
	add_header 'Content-Type' 'application/json; charset=UTF-8';
	return 401 '{"error": {"status_code": 401,"message": "Unauthorized"}}';
}

error_page 403 /403.json;
location /403.json {
	add_header 'Content-Type' 'application/json; charset=UTF-8';
	return 403 '{"error": {"status_code": 403,"message": "Forbidden"}}';
}

error_page 404 /404.json;
location /404.json {
	add_header 'Content-Type' 'application/json; charset=UTF-8';
	return 404 '{"error": {"status_code": 404,"message": "Not Found"}}';
}

error_page 408 /408.json;
location /408.json {
	add_header 'Content-Type' 'application/json; charset=UTF-8';
	return 408 '{"error": {"status_code": 408,"message": "Request Timeout"}}';
}

error_page 429 /429.json;
location /429.json {
	add_header 'Content-Type' 'application/json; charset=UTF-8';
	return 429 '{"error": {"status_code": 429,"message": "Too Many Requests"}}';
}
